name: Terraform Workflow

on:
  push:
    branches:
      - main  # Trigger on push to main branch
  workflow_dispatch:
    inputs:
      region:
        description: 'region to deploy (e.g., us-east-1)'
        required: true
        type: string
      ecrrepositoryname:
        description: 'ecr repository name to deploy'
        required: true
        type: string
      ecsclustername:
        description: 'The ecs cluster name for deployment'
        required: true
        type: string
      ecsservicename:
        description: 'The ecs service name for deployment'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  terraform-deployment:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ '${{ secrets.AWS_ACCESS_KEY_ID }}' }}
          aws-secret-access-key: ${{ '${{ secrets.AWS_SECRET_ACCESS_KEY }}' }}
          aws-region: ${{ '${{ github.event.inputs.region }}' }}

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      # Format Terraform code
      - name: Terraform Format
        run: terraform fmt
        working-directory: ./terraform

      # Validate the Terraform code
      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      # Generate the Terraform execution plan
      - name: Terraform Plan
        run: terraform plan -var "ecrrepositoryname=${{ '${{ github.event.inputs.ecrrepositoryname }}' }}" -var "region=${{ '${{ github.event.inputs.region }}' }}" -var "ecsclustername=${{ '${{ github.event.inputs.ecsclustername }}' }}" -var "ecsservicename=${{ '${{ github.event.inputs.ecsservicename }}' }}" -out=tfplan
        working-directory: ./terraform

      # Apply the Terraform execution plan
      - name: Terraform Apply
        run: terraform apply -auto-approve "tfplan"
        working-directory: ./terraform

  # Job to destroy the EC2 instance
  destroy_instance:
    runs-on: ubuntu-latest
    needs:
      - terraform-deployment
    # Execute this job only if the action input is "destroy"
    steps:
      # Checkout the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ '${{ secrets.AWS_ACCESS_KEY_ID }}' }}
          aws-secret-access-key: ${{ '${{ secrets.AWS_SECRET_ACCESS_KEY }}' }}
          aws-region: ${{ '${{ github.event.inputs.region }}' }}

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      # Format Terraform code
      - name: Terraform Format
        run: terraform fmt
        working-directory: ./terraform

      # Generate the Terraform destroy plan
      - name: Terraform Plan Destroy
        run: terraform plan -destroy -var "ecrrepositoryname=${{ '${{ github.event.inputs.ecrrepositoryname }}' }}" -var "region=${{ '${{ github.event.inputs.region }}' }}" -var "ecsclustername=${{ '${{ github.event.inputs.ecsclustername }}' }}" -var "ecsservicename=${{ '${{ github.event.inputs.ecsservicename }}' }}" -out=tfplan
        working-directory: ./terraform
        
      # Apply the Terraform destroy plan
      - name: Terraform Destroy
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform 